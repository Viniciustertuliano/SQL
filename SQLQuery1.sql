--Aula 01 06/02/2020
select getdate()
--Inserindo "---" comentario

/*
Comentario em bloco
selecionar cada programa passo a passo
*/

--Tecla comentario CTRL + KC
--sql serve como SELECT GETDATE(), select getdate() ou SELECT GetDate()
--CTRL + R deixar de exibir o resultado

--Criando o banco de dados

CREATE DATABASE AULA01

--EXPERIMENTANDO AS TABELAS DO
--FIT_ALUNOS

SELECT * FROM E_EMPRESA

--EXERCICIO: VERIFICAR O REGISTRO DAS TABELA E_EVENTO, E_LOCAL, FABRICANTE E FT_ESTADIO
--QUANTOS REGISTROS CADAS TABELA POSSUI

SELECT * FROM E_EVENTO
--2 linhas

SELECT * FROM E_LOCAL
--1 linhas

SELECT * FROM FABRICANTE
--9 linhas

SELECT * FROM FT_ESTADIO
--6 linhas

--AULA 02 13/02/2020

--ENTRANDO NO DATABASE

USE master
USE fit_alunos

SELECT * FROM fit_alunos.dbo.FT_ESTADIO -- 6 resultados

--CRIANDO TABELAS

CREATE TABLE TB_IMPACTA
(
	NOME_ALUNO	CHAR(50)
)

 --CONSULTADO A TABELA CRIADA
SELECT * FROM TB_IMPACTA

--VERIFICANDO A ESTRUTURA DA TABELA

SP_HELP TB_IMPACTA

---INSERINDO VALORES NA TABELA

INSERT INTO TB_IMPACTA
(NOME_ALUNO)
VALUES
('ABNER PORTO'),
('JAIR PORTO')

SELECT * FROM TB_IMPACTA

--EXERCICIO AULA 13.02

CREATE TABLE TB_AULA02
(

CIDADE CHAR(30)

)

INSERT INTO TB_AULA02
(CIDADE)
VALUES
('São Paulo'),
('Rio de Janeiro')

SELECT * FROM TB_AULA02

--DROP TABLE - EXCLUIR TABELA

/*

CRIANDO UMA TABELA COM CAMPO DE AUTO NUMERAÇÃO E
COM CHAVE PRIMÁRIA.

*/


CREATE TABLE UF
	(
		ID_UF INT IDENTITY,
		UF CHAR(30)
	)

INSERT INTO UF
	(UF)
VALUES
	('SÃO PAULO'),
	('RIO DE JANEIRO')

SELECT * FROM UF

-- DELETAR TODOS OS REGISTROS DA TABELA
-- OBS: A CONTAGEM DO ID NÃO É ZERADA, DANDO CONTINUIDADE AO INSERIR NOVOS DADOS.

DELETE UF

-- CRIANDO TABELA COM CHAVE PRIMARIA

CREATE TABLE TB_SI_E_ADS
(

	COD_ALUNO INT,
	NOME_ALUNO CHAR(30)
	
	-- CONFIGURAÇÃO CHAVE PRIMARIA E RESTRIÇÃO DE DUPLICIDADE
	CONSTRAINT PK_COD_ALUNO PRIMARY KEY (COD_ALUNO)
)

INSERT INTO TB_SI_E_ADS
(COD_ALUNO, NOME_ALUNO)
VALUES

(1800074,'Beltrano')

SELECT * FROM TB_SI_E_ADS


/*

UML: UNIFYING MODELING LANGUAGE

________________________
|	   TB_CADASTRO     |
________________________
|COD_CLIENTE INT       |
|NOME_CLIENTE CHAR(30) |
|TELEFONE BIGINT	   |
________________________
OBS: COD_CLIENTE (PK)

*/

CREATE TABLE TB_CADASTRO
	(
		COD_CLIENTE INT,
		NOME_CLIENTE CHAR(30),
		TELEFONE BIGINT
		-- CHAVE PRIMARIA E RESTRIÇÃO DE DUPLICIDADE
		CONSTRAINT PK_COD_CLIENTE PRIMARY KEY (COD_CLIENTE)
	)

INSERT INTO TB_CADASTRO
	(COD_CLIENTE,NOME_CLIENTE,TELEFONE)
VALUES
	(4,'TESTE',46578000)


SELECT * FROM TB_CADASTRO

SP_HELP TB_CADASTRO

--20/02/2020

--clustered    1.Performance
--unique       2.Não repete
--primary key  3.Abre uma porta para uma foreign key

--non clustered 

--Foreign key

CREATE TABLE TB_FUNC
(
	COD_FUNC	INT,
	NOME_FUNC	CHAR(30)

	CONSTRAINT PK_FUNC PRIMARY KEY(COD_FUNC)
)

INSERT INTO TB_FUNC
(COD_FUNC, NOME_FUNC)
VALUES 
(1000, 'JÓSE'),
(2000, 'MARIA')

CREATE TABLE TB_DEPN
(
	COD_DEPN	INT, 
	NOME_DEPN	CHAR(30),
	COD_FUNC	INT

	CONSTRAINT PK_COD_DEPN PRIMARY KEY (COD_DEPN),
	CONSTRAINT FK_COD_FUNC FOREIGN KEY (COD_FUNC)
	REFERENCES TB_FUNC(COD_FUNC)
)

INSERT INTO TB_DEPN
(COD_DEPN,NOME_DEPN, COD_FUNC)
VALUES
(1000,'jOSÉ JUNIOR', 1000),
(2000, 'MARIO BROS',2000),
--(3000,'ORFÃO',3000)

SELECT * FROM TB_DEPN

--CRIAR TABELA DE VEICULOS 
--COD_VEIC (PK)	BIGINT
--NOME_VEIC		VARCHAR(50)

--CRIAR TABELA DE MULTAS
--COD_MULTA(PK)		BIGINT
--VALOR_MULTA		MONEY
--COD_VEICULO(FK)	BIGINT

--ESTABELECER RELACIONAMENTO ENTRE AS DUAS TABELAS

CREATE TABLE TB_VEICULOS
(
	COD_VEIC	BIGINT,
	NOME_VEIC	VARCHAR(30)

	CONSTRAINT PK_COD_VEIC PRIMARY KEY(COD_VEIC)
)

INSERT INTO TB_VEICULOS
(COD_VEIC, NOME_VEIC)
VALUES
(1000, 'FOX'),
(2000, 'GOL')

CREATE TABLE TB_MULTA
(
	COD_MULTA		BIGINT,
	VALOR_MULTA		MONEY,	
	COD_VEIC		BIGINT

	CONSTRAINT PK_COD_MULTA PRIMARY KEY (COD_MULTA),
	CONSTRAINT FK_COD_VEIC FOREIGN KEY (COD_VEIC)
	REFERENCES TB_VEICULOS(COD_VEIC)
)

INSERT INTO TB_MULTA
(COD_MULTA,VALOR_MULTA,COD_VEIC)
VALUES
(1000,100.00,1000),
(2000,500.00,2000),
--(3000,350.00,3000)

--CRIAR A ESTRUTURA DE UM RESTAURANTE (CARDÁPIO + COMANDA)
--NA TABELA DE CARDÁPIO, COLOCAR: COD_PRAT + NOME_PRATO + VALOR_PRATO
--NA TABELA DE COMANDA, COLOCAR, COD_PRATO + DATA_PEDIDO
--FORMATO DATA: AAAA-MM-DD

CREATE TABLE TB_CARDAPIO
(
	COD_PRAT	INT,
	NOME_PRAT	VARCHAR (30),
	VALOR_PRAT	MONEY

	CONSTRAINT PK_COD_PRAT PRIMARY KEY(COD_PRAT)
)



INSERT INTO TB_CARDAPIO
(COD_PRAT,NOME_PRAT,VALOR_PRAT)
VALUES
(10,'FEIJOADA',25.00),
(20,'LASANHA',20.00)

CREATE TABLE TB_COMANDA
(	COD_PRATO		INT,
	DATA_PEDIDO		DATE
	
	CONSTRAINT FK_COD_PRAT FOREIGN KEY(COD_PRATO)
	REFERENCES TB_CARDAPIO(COD_PRAT)

)

INSERT INTO TB_COMANDA
(COD_PRATO,DATA_PEDIDO)
VALUES
(10,'2020-02-20'),
(20,'2020-02-19'),
(30,'2020-02-19')

SELECT * FROM TB_COMANDA


--27/02/2020

CREATE TABLE TB_CLIMA
(
	ID_CLIMA	INT,
	DESCRIÇÃO	CHAR(50)
)

DROP TABLE TB_CLIMA

INSERT INTO TB_CLIMA
(ID_CLIMA, DESCRIÇÃO)
VALUES
(2000, '')

SELECT * FROM TB_CLIMA

CREATE TABLE TB_CLIMA2
(
	ID_CLIMA	INT,
	DESCRICAO	CHAR(50) NOT NULL
)

INSERT INTO TB_CLIMA2
(ID_CLIMA , DESCRICAO)
VALUES
(1000, 'TEMPO GELADO')

INSERT INTO TB_CLIMA2
( DESCRICAO )
VALUES
( 'TEMPO MUITO GELADO' )

INSERT INTO TB_CLIMA2
( ID_CLIMA )
VALUES
( 3000 )

--EXERCICIO: CRIAR UMA TABELA DE TIMES, CONTENDO OS CAMPOS:
--ID_BID		(CAMPO DE AUTO NUMERAÇÃO)
--CNPJ_TIME		(NÃO ACEITA NULOS)
--NOME_TIME		(NÃO ACEITA NULOS)
--QTD_TITULOS		(ACEITA NULOS)

CREATE TABLE TB_TIMES
(
	ID_BID			INT IDENTITY,
	CNPJ_TIME		BIGINT NOT NULL,
	NOME_TIME		CHAR(20) NOT NULL,
	QTD_TITULOS		INT
)

DROP TABLE TB_TIMES


--PRIMEIRO ERRO: TENTAR INSERIR VALOR A COLUNO COM IDENTITY
INSERT INTO TB_TIMES
(ID_BID, CNPJ_TIME,NOME_TIME, QTD_TITULOS)
VALUES
(301,123450001, 'TIME', 3)

--INSERT CORRETO
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(302,'TIME2', 3)

--SEGUNDO ERRO: TENTAR INSERIR UM VALOR CHAR MAIOR QUE O TAMANHO DO PARAMETRO
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(304, 'KLSJEFGNSKLJERNGOOSERNGSERG' , 3)

--TERCEIRO TIPO DE ERRO: ESTOURO DA VARIÁVEL NUMÉRICA 
   INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(9223372036854775808, 'SPFC' , 3)

SELECT * FROM TB_TIMES

--EXERCICIO: APAGAR A TABELA ACIMA E CRIAR COM AS MESMAS CONDIÇÕES,
--ALTERANDO APENAS O CAMPO CNPJ PARA UNIQUE

DROP TABLE TB_TIMES

--EXERCICIO: CRIAR UMA TABELA DE TIMES, CONTENDO OS CAMPOS:
--ID_BID		(CAMPO DE AUTO NUMERAÇÃO)
--CNPJ_TIME		(NÃO ACEITA NULOS) + (CAMPO SEM DUPLICIDADE)
--NOME_TIME		(NÃO ACEITA NULOS)
--QTD_TITULOS		(ACEITA NULOS)

CREATE TABLE TB_TIMES
(
	ID_BID			INT IDENTITY,
	CNPJ_TIME		BIGINT NOT NULL ,
	NOME_TIME		CHAR(20) NOT NULL,
	QTD_TITULOS		INT
	CONSTRAINT UQ_TIMES_CNPJ UNIQUE(CNPJ_TIME) 
)

--PRIMEIRO ERRO: TENTAR INSERIR VALOR A COLUNO COM IDENTITY
INSERT INTO TB_TIMES
(ID_BID, CNPJ_TIME,NOME_TIME, QTD_TITULOS)
VALUES
(301,123450001, 'TIME', 3)

--INSERT CORRETO
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(302,'TIME2', 3)

--SEGUNDO ERRO: NÃO É POSSIVEL INSERIR UM ELEMENTO REPETIDO NO CAMPO CNPJ
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(302,'TIME2', 3)

--TERCEIRO ERRO: TENTAR INSERIR UM VALOR CHAR MAIOR QUE O TAMANHO DO PARAMETRO
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(304, 'KLSJEFGNSKLJERNGOOSERNGSERG' , 3)

--QUARTO ERRO: ESTOURO DA VARIÁVEL NUMÉRICA 
INSERT INTO TB_TIMES
(CNPJ_TIME, NOME_TIME, QTD_TITULOS)
VALUES
(9223372036854775808, 'SPFC' , 3)

SELECT * FROM TB_TIMES

--CONSTRAINT DEFAULT

DROP TABLE TB_TIMES

CREATE TABLE TB_TIMES
(
	ID_BID			INT IDENTITY,
	CNPJ_TIME		BIGINT NOT NULL ,
	NOME_TIME		CHAR(20) NULL DEFAULT 'TRICOLOR',
	QTD_TITULOS		INT	DEFAULT 150
	CONSTRAINT UQ_TIMES_CNPJ UNIQUE(CNPJ_TIME) 
)

INSERT INTO TB_TIMES
(CNPJ_TIME,QTD_TITULOS)
VALUES
(302,NULL)

SELECT * FROM TB_TIMES

SP_HELP TB_TIMES

--CONSTRAINT CHECK

CREATE TABLE TB_CADASTRO_DATA
(
	CPF				BIGINT,
	DATA_CADASTRO	DATE,

	CONSTRAINT CK_DATA CHECK (DATA_CADASTRO >= '2020-02-26')
)

INSERT INTO TB_CADASTRO_DATA
(CPF, DATA_CADASTRO)
VALUES
(317, '2020-02-01')

--EXERCICIO:
--CRIAR TABELA DE CLIENTES, CONTENDO OS CAMPOS
--1.CPF		(NÃO PERMITE DUPLICIDADE)
--2.NOME		(NÃO PERMITE NULOS)
--3.DATA_NASC	(NÃO PERMITE VALORES ANTERIORES AO ANO 2000)
--4.PROFISSÃO	(CASO NÃO PREENCHA NADA, INSERIR'DBA')


CREATE TABLE TB_CLIENTES
(
	CPF			BIGINT, 
	NOME		VARCHAR(30) NOT NULL,
	PROFISSÃO	VARCHAR(25) NULL DEFAULT 'DBA',
	DATA_NASC	DATE,
	

	CONSTRAINT UQ_CLI_CPF UNIQUE(CPF),
	CONSTRAINT CK_DATA_NASC CHECK (DATA_NASC >= '2000-01-01')
	
)

--INSERT CORRETO 
INSERT INTO TB_CLIENTES
(CPF, NOME, DATA_NASC, PROFISSÃO)
VALUES
(48161546800,'VINICIUS','2000-02-05', 'MONITOR')

--1° ERRO DE DUPLICIDADE NO CAMPO CPF
INSERT INTO TB_CLIENTES
(CPF, NOME, DATA_NASC, PROFISSÃO)
VALUES
(48161546800,'VINICIUS','2000-02-05', 'MONITOR')

--2° ERRO DE CAMPO NOME VAZIO 
INSERT INTO TB_CLIENTES
(CPF, DATA_NASC, PROFISSÃO)
VALUES
(48161546800,'2000-02-05', 'MONITOR')

--3° ERRO NÃO PERMITE VALORES MENORES QUE 2000 
INSERT INTO TB_CLIENTES
(CPF, NOME,DATA_NASC, PROFISSÃO)
VALUES
(48161546900,'THAYNA','1999-01-05', 'MONITOR')

--4° ERRO CAMPO PROFISSÃO VAZIO PREENCHA DBA 
INSERT INTO TB_CLIENTES
(CPF, NOME,DATA_NASC )
VALUES
(48161567900,'CECILIA','2017-01-05')




SELECT * FROM TB_CLIENTES

